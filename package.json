{
  "name": "linter-javac",
  "main": "./lib/init",
  "version": "1.8.1",
  "description": "Lint Java on save, using javac.",
  "repository": "https://github.com/AtomLinter/linter-javac",
  "license": "MIT",
  "engines": {
    "atom": ">1.4.0"
  },
  "dependencies": {
    "atom-linter": "^4.7.0",
    "atom-package-deps": "^4.0.1",
    "voucher": "^0.1.2"
  },
  "providedServices": {
    "linter": {
      "versions": {
        "1.0.0": "provideLinter"
      }
    }
  },
  "package-deps": [
    "linter"
  ],
  "configSchema": {
    "javacExecutablePath": {
      "type": "string",
      "default": "javac",
      "description": "Path to the javac executable. This setting will be used to call the java-compiler. The entered value should be immediately callable on commandline. Example: `C:\\Program Files\\Java\\jdk1.6.0_16\\bin\\javac.exe`. Keep in mind that placeholders like `~` do **not** work. If your [path-variable](https://en.wikipedia.org/wiki/PATH_%28variable%29) is set properly it should not be necessary to change the default."
    },
    "additionalClasspaths": {
      "type": "string",
      "default": "",
      "description": "Additional classpaths to be used (for the `-cp`-option) when calling javac, separate multiple paths using the right path-delimiter for your os (`:`/`;`). Be aware that existing classpath-definitions from the environment variable \"CLASSPATH\" will be merged into the argument, as well as the content of your optional [`.classpath`-files](https://atom.io/packages/linter-javac). Example: `/path1:/path2` will become `javac -cp :/path1:/path2`. Keep in mind that placeholders like `~` do **not** work."
    },
    "additionalJavacOptions": {
      "type": "string",
      "default": "",
      "description": "Your additional options will be inserted between the javac-command and the sourcefiles. Example: `-d /root/class-cache` will become `javac -Xlint:all -d /root/class-cache .../Test.java` take a look to the [javac-docs](http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javac.html) for further information on valid options. Keep in mind that placeholders like `~` do **not** work."
    },
    "classpathFilename": {
      "type": "string",
      "default": ".classpath",
      "description": "You can change the default .classpath filename. This is a useful option if You e.g. bump into conflicts with Eclipse users."
    },
    "javacArgsFilename": {
      "type": "string",
      "default": "",
      "description": "Optionally you can define filename for a [javac argsfile](https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html#BHCCFGCD) that is located alongside with the .classpath file in the same directory. Contents of the argfile are passed to javac as arguments."
    },
    "verboseLogging": {
      "type": "boolean",
      "default": false,
      "description": "If enabled linter-javac will log its internal states to the console. This option is intended for debugging purposes **only** - enable this **only temporarily**, if the linter is not working as expected. You can access the output from the dev-console (alt+cmd+i), you may file the log-messages to a proper issue in order to help us improving this package. Do not forget to disable this option afterwards - since this may lead to performance issues."
    }
  }
}
